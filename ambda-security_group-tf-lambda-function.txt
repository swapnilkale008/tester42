my-function.py
import requests

def lambda_handler(event, context):
    # Payload data
    payload = {
        "subnet_id": "<Your Private Subnet ID>",
        "name": "<Your Full Name>",
        "email": "<Your Email Address>"
    }
    # Security header
    headers = {
        "X-Siemens-Auth": "test"
    }
    # API endpoint
    url = "https://2xfhzfbt31.execute-api.eu-west-1.amazonaws.com/candidate-email_serverless_lambda_stage/data"
    # Post request
    response = requests.post(url, headers=headers, json=payload)
    # Print response
    print(response.status_code)
    print(response.text)
------

pipeline {
    agent any

    stages {
        stage('Invoke API Endpoint') {
            steps {
                sh '''
                    # Payload data
                    PAYLOAD='{
                        "subnet_id": "<Your Private Subnet ID>",
                        "name": "<Your Full Name>",
                        "email": "<Your Email Address>"
                    }'

                    # Security header
                    HEADER='X-Siemens-Auth:test'

                    # API endpoint
                    URL='https://2xfhzfbt31.execute-api.eu-west-1.amazonaws.com/candidate-email_serverless_lambda_stage/data'

                    # Invoke the API endpoint
                    RESPONSE=$(curl -sS -X POST -H "${HEADER}" -H "Content-Type: application/json" -d "${PAYLOAD}" "${URL}")

                    # Print the response
                    echo ${RESPONSE}
                '''
            }
        }
    }
}


# define the provider and the region
provider "aws" {
  region = "us-west-2"
}

# define the VPC ID and NAT Gateway ID
data "aws_vpc" "selected" {
  id = "vpc-1234567890"
}

data "aws_nat_gateway" "selected" {
  id = "nat-0987654321"
}

# define the IAM Role and Policy for the Lambda function
data "aws_iam_policy_document" "lambda_policy" {
  statement {
    effect = "Allow"
    actions = [
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ]
    resources = ["arn:aws:logs:*:*:*"]
  }
}

data "aws_iam_role" "lambda_role" {
  name = "lambda_execution_role"
}

# create the private subnet
resource "aws_subnet" "private" {
  vpc_id            = data.aws_vpc.selected.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-west-2a"
}

# create the routing table and associate it with the private subnet
resource "aws_route_table" "private" {
  vpc_id = data.aws_vpc.selected.id
}

resource "aws_route" "private_nat_gateway" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = data.aws_nat_gateway.selected.id
}

resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private.id
}

# create the Lambda function
resource "aws_lambda_function" "example" {
  filename         = "example.zip"
  function_name    = "example_function"
  role             = data.aws_iam_role.lambda_role.arn
  handler          = "index.handler"
  runtime          = "nodejs12.x"
  source_code_hash = filebase64sha256("example.zip")
}

# create the security group
resource "aws_security_group" "example" {
  name_prefix = "example_security_group"
  vpc_id      = data.aws_vpc.selected.id

  ingress {
    from_port = 0
    to_port   = 65535
    protocol  = "tcp"
    cidr_blocks = [
      "10.0.0.0/8"
    ]
  }

  egress {
    from_port = 0
    to_port   = 65535
    protocol  = "tcp"
    cidr_blocks = [
      "0.0.0.0/0"
    ]
  }
}

--------



aws lambda invoke --function-name <Your Lambda Function Name> --log-type Tail --payload '{}' response.json


